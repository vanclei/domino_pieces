{
    "AbInitioVolumeReconstructionPiece": {
        "name": "AbInitioVolumeReconstructionPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Ab-Initio (Reference) Volume Reconstruction",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Ab-Initio (Reference) Volume Reconstruction",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "abinit_K": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "description": "The number of classes. Each class will be randomly initialized independently, unless an initial structure was provided, in which case each class will be a random variant of the initial structure",
                    "title": "Number of Ab-Initio classes"
                },
                "abinit_num_particles": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The number of particles to use in optimization. Only this many particles will be read and classified, starting from the beginning of the particle stack. The output of this job will only contain this many particles as well.",
                    "title": "Num particles to use"
                },
                "abinit_max_res": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 12.0,
                    "description": "Maximum frequency to consider",
                    "title": "Maximum resolution (Angstroms)"
                },
                "abinit_init_res": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 35.0,
                    "description": "Starting frequency to consider",
                    "title": "Initial resolution (Angstroms)"
                },
                "abinit_num_init_iters": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 200,
                    "description": "Number of initial iterations before annealing starts",
                    "title": "Number of initial iterations"
                },
                "abinit_num_final_iters": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 300,
                    "description": "Number of final iterations after annealing ends",
                    "title": "Number of final iterations"
                },
                "abinit_radwn_step": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.04,
                    "description": "Increase in Fourier radius a each iteration",
                    "title": "Fourier radius step"
                },
                "abinit_window": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Softly window the reconstructions in real space at each iteration",
                    "title": "Window structures in real space"
                },
                "abinit_center": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Center the reconstructions in real space at each iteration",
                    "title": "Center structures in real space"
                },
                "abinit_scale_mg_correct": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "(Experimental) Estimate and compute optimal scales per micrograph",
                    "title": "Correct for per-micrograph optimal scales"
                },
                "abinit_scale_compute": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "(Experimental) Estimate and compute optimal scales per image",
                    "title": "Compute per-image optimal scales"
                },
                "abinit_mom": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0,
                    "description": "Momentum for stochastic gradient descent",
                    "title": "SGD Momentum"
                },
                "abinit_sparsity": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0,
                    "description": "",
                    "title": "Sparsity prior"
                },
                "abinit_minisize_init": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 90,
                    "description": "Number of images per minibatch at the beginning. Set to zero to autotune. Autotune sets the initial minibatch size to 300 if the particle is small (box extent is less than 220A) or symmetry order is greater than 4.",
                    "title": "Initial minibatch size"
                },
                "abinit_minisize": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 300,
                    "description": "Final number of images per minibatch. Set to zero to autotune. Autotune sets the minibatch size to 1000 if the particle is small (box extent is less than 220A) or symmetry order is greater than 4.",
                    "title": "Final minibatch size"
                },
                "abinit_minisize_epsilon": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.05,
                    "description": "Parameter that controls batch size when autotuning minibatch size. Set closer to zero for larger batches",
                    "title": "Abinit minisize epsilon"
                },
                "abinit_minisize_minp": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.01,
                    "description": "Parameter that controls how the batch size adjusts to low probability classes when autotuning minibatch sizes",
                    "title": "Abinit minisize minp"
                },
                "abinit_minisize_num_init_iters": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 300,
                    "description": "When to switch to final number of images per minibatch",
                    "title": "Initial minibatch size num iters"
                },
                "abinit_noise_model": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "symmetric",
                    "description": "Noise model to use. Valid options are white, coloured or symmetric. Symmetric is the default, meaning coloured with radial symmetry",
                    "title": "Noise model (white, symmetric or coloured)"
                },
                "abinit_noise_priorw": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 50,
                    "description": "Weight of the prior for estimating noise (units of # of images)",
                    "title": "Noise priorw"
                },
                "abinit_noise_initw": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5000,
                    "description": "Weight of the initial noise estimate (units of # of images)",
                    "title": "Noise initw"
                },
                "abinit_noise_init_sigmascale": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Scale factor initially applied to the base noise estimate, set to null to auto-estimate based on ESS target",
                    "title": "Noise initial sigma-scale"
                },
                "abinit_class_anneal_beta": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.1,
                    "description": "Expected similarity of structures from different classes. A number between 0 and 1. 0 means classes are independent, 1 means classes are very similar",
                    "title": "Class similarity"
                },
                "abinit_class_anneal_start": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 300,
                    "description": "Start point for annealing the similarity factor",
                    "title": "Class similarity anneal start iter"
                },
                "abinit_class_anneal_end": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 350,
                    "description": "Finish point for annealing the similarity factor",
                    "title": "Class similarity anneal end iter"
                },
                "abinit_target_initial_ess_fraction": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.011,
                    "description": "Fraction of poses at the first iteration that should have significant probability (used for auto-tuning initial noise sigma-scale)",
                    "title": "Target 3D ESS Fraction"
                },
                "abinit_symmetry": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "C1",
                    "description": "Symmetry enforced (C, D, I, O, T). Eg. C1, D7, C4 etc. Enforcing symmetry above C1 is not recommended for ab-initio reconstruction",
                    "title": "Symmetry"
                },
                "abinit_high_lr_duration": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 100,
                    "description": "How long to apply the initial learning rate",
                    "title": "Initial learning rate duration"
                },
                "abinit_high_lr": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.4,
                    "description": "Learning rate (step size) used at the start of optimization to help make rapid progress",
                    "title": "Initial learning rate"
                },
                "abinit_nonneg": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Enforce non-negativity of structures in real space during optimization. Non-negativity is recommended for ab-initio reconstruction",
                    "title": "Enforce non-negativity"
                },
                "abinit_ignore_dc": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "Ignore the DC component of images. Should be true",
                    "title": "Ignore DC component"
                },
                "abinit_seed_init": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Random seed for generating initial structures. Set to null for each run to use a different seed based off the dataset random seed",
                    "title": "Initial structure random seed"
                },
                "abinit_init_radwn_cutoff": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 7,
                    "description": "Lowpass filter cutoff in Fourier radius for initial random structures",
                    "title": "Initial structure lowpass (Fourier radius)"
                },
                "abinit_use_engine": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "",
                    "title": "Use fast codepaths"
                },
                "intermediate_plots": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": true,
                    "description": "",
                    "title": "Show plots from intermediate steps"
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/AbInitioVolumeReconstructionPiece"
    },
    "ManualPickerPiece": {
        "name": "ManualPickerPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Manual Picker",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Manual Picker Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/ManualPickerPiece"
    },
    "ResolutionEstimationPiece": {
        "name": "ResolutionEstimationPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Resolution Estimation (Local and Global)",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Resolution Estimation (Local and Global)",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/ResolutionEstimationPiece"
    },
    "ImportMoviesPiece": {
        "name": "ImportMoviesPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Import Movies",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "This is an example of a simple Domino Piece that sleep for N seconds",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "description": "Import Movies Piece Input Model",
            "properties": {
                "job_start": {
                    "description": "Job Start",
                    "from_upstream": "always",
                    "title": "Job Start",
                    "type": "string"
                },
                "blob_paths": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Absolute path, wildcard-expression (e.g. /mount/data/somewhere/*.mrcs) that will be imported. MRC (mrc, mrcs, stk) and TIFF format supported.",
                    "title": "Movies data path"
                },
                "gainref_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Absolute path to a single gain reference for all the raw data, in MRC format. Leave blank if data is already gain-corrected.",
                    "title": "Gain reference path"
                },
                "defect_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Absolute path to a defect file for all the raw data. This should be a .txt file. Leave blank if not applicable.",
                    "title": "Defect file path"
                },
                "gainref_flip_x": {
                    "default": false,
                    "description": "Flip gain ref and defect file left-to-right (in X axis)",
                    "title": "Flip gain ref & defect file in X?",
                    "type": "boolean"
                },
                "gainref_flip_y": {
                    "default": false,
                    "description": "Flip gain ref and defect file top-to-bottom (in Y axis)",
                    "title": "Flip gain ref & defect file in Y?",
                    "type": "boolean"
                },
                "gainref_rotate_num": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0,
                    "description": "Rotate gain ref counter-clockwise by 90 degrees this many times",
                    "title": "Rotate gain ref?"
                },
                "psize_A": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Pixel size of the raw movie data in Angstroms",
                    "title": "Raw pixel size (A)"
                },
                "accel_kv": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "",
                    "title": "Accelerating Voltage (kV)"
                },
                "cs_mm": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "",
                    "title": "Spherical Aberration (mm)"
                },
                "total_dose_e_per_A2": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "",
                    "title": "Total exposure dose (e/A^2)"
                },
                "negative_stain_data": {
                    "default": false,
                    "description": "If Negative Stain Data is on, this indicates that there are light particles on dark background. If it's off, this indicates the movies have dark particles on light background (cryo-em data).",
                    "title": "Negative Stain Data",
                    "type": "boolean"
                },
                "phase_plate_data": {
                    "default": false,
                    "description": "",
                    "title": "Phase Plate Data",
                    "type": "boolean"
                },
                "override_exp_group_id": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "",
                    "title": "Override Exposure Group ID"
                },
                "skip_header_check": {
                    "default": false,
                    "description": "Skip reading of every header file to increase import speed. WARNING: this assumes exposure shapes and extensions are consistent across the entire dataset.",
                    "title": "Skip Header Check",
                    "type": "boolean"
                },
                "eer_num_fractions": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 40,
                    "description": "Number of fractions to make out of the EER input data.",
                    "title": "EER Number of Fractions"
                },
                "eer_upsamp_factor": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 2,
                    "description": "Upsampling factor when decoding EER input data. Note that the pixel size you provide should be the raw pixel size at the nominal 4k sensor, not the pixel size after EER upsampling. ",
                    "title": "EER Upsampling Factor"
                }
            },
            "required": [
                "job_start"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "imported_movies": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Imported movies",
                    "title": "Imported movies"
                },
                "failed_movies": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Movies that failed to import successfully.",
                    "title": "Failed movies"
                }
            },
            "required": [
                "imported_movies",
                "failed_movies"
            ],
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/ImportMoviesPiece"
    },
    "AdditionalRefinementPiece": {
        "name": "AdditionalRefinementPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Aditional Refinement",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Aditional Refinement Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/AdditionalRefinementPiece"
    },
    "PatchMotionCorrectionMultiPiece": {
        "name": "PatchMotionCorrectionMultiPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Patch Motion Correction Multi",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Patch Motion Correction Multi",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "FCropFactorTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "1",
                        "3/4",
                        "1/2",
                        "1/4"
                    ],
                    "title": "FCropFactorTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "imported_movies": {
                    "description": "Movies for motion correction",
                    "from_upstream": "always",
                    "title": "Movies",
                    "type": "string"
                },
                "do_plots": {
                    "default": true,
                    "description": "Whether or not to make plots of motion trajectories. Motion trajectories can also be inspected using the 'Curate Exposures' job type after this job completes.",
                    "title": "Make motion diagnostic plots",
                    "type": "boolean"
                },
                "num_plots": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 10,
                    "description": "Only make plots for the first this many movies.",
                    "title": "Number of movies to plot"
                },
                "random_num": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Randomly select this many movies to process. Helpful for tweaking params.",
                    "title": "Only process this many movies"
                },
                "memoryfix2": {
                    "default": false,
                    "description": "If running out of GPU memory, this option can be used to prioritize memory use at the expense of speed (BETA). The results are unchanged.",
                    "title": "Low-memory mode",
                    "type": "boolean"
                },
                "res_max_align": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 5,
                    "description": "Maximum resolution (in A) to consider when aligning frames. Generally, betwen 5A and 3A is best.",
                    "title": "Maximum alignment resolution (A)"
                },
                "bfactor": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 500,
                    "description": "B-factor that blurs frames before aligning. Generally 500 to 100 is best.",
                    "title": "B-factor during alignment"
                },
                "frame_start": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0,
                    "description": "Which frame number, starting at zero, to begin motion correction from. This value controls how many early frames are dropped from the motion corrected result. This value will also be used in local motion correction.",
                    "title": "Start frame (included, 0-based)"
                },
                "frame_end": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Which frame number, starting at zero, to not include in motion correction, also excluding all frames after this one. Generally this does not improve results, as later frames are downweighted during dose weighting in local motion correction.",
                    "title": "End frame (excluded, 0-based) "
                },
                "output_fcrop_factor": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FCropFactorTypeType"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "1",
                    "description": "Output Fourier cropping factor. 1.0 means no cropping, 1/2 means crop to 1/2 the resolution, etc.",
                    "title": "Output F-crop factor"
                },
                "override_total_exp": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Override the dose (in total e/A^2 over the exposure) that was given at import time but can be overridden here.",
                    "title": "Override e/A^2"
                },
                "variable_dose": {
                    "default": false,
                    "description": "Enable correct processing when frames have variable dose fractionation",
                    "title": "Allow Variable Dose",
                    "type": "boolean"
                },
                "smooth_lambda_cal": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 0.5,
                    "description": "Calibrated smoothing constant applied to trajectories",
                    "title": "Calibrated smoothing"
                },
                "override_K_Z": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Override automatically selected spline order for Z dimension (time)",
                    "title": "Override knots Z"
                },
                "override_K_Y": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Override automatically selected spline order for Y dimension (vertical)",
                    "title": "Override knots Y"
                },
                "override_K_X": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Override automatically selected spline order for X dimension (horizontal)",
                    "title": "Override knots X"
                },
                "compute_num_gpus": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": 1,
                    "description": "Number of GPUs over which to parallelize computation.",
                    "title": "Number of GPUs to parallelize"
                }
            },
            "required": [
                "imported_movies"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "micrographs": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Micrographs full-frame aligned",
                    "title": "Micrographs"
                },
                "micrographs_incomplete": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Incomplete Micrographs full-frame aligned",
                    "title": "Micrographs incomplete"
                }
            },
            "required": [
                "micrographs",
                "micrographs_incomplete"
            ],
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/PatchMotionCorrectionMultiPiece"
    },
    "ExportMetadataToTextFileAndSubmitToEmdbPiece": {
        "name": "ExportMetadataToTextFileAndSubmitToEmdbPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Export Metadata to Text file and Submit to EMDB",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Export Metadata to Text file and Submit to EMDB Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/ExportMetadataToTextFileAndSubmitToEmdbPiece"
    },
    "CustomPythonPiece": {
        "name": "CustomPythonPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "default",
            "python"
        ],
        "style": {
            "node_label": "Custom Python",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-brands:python",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Executes user-defined Python code.",
        "input_schema": {
            "$defs": {
                "InputKwargsModel": {
                    "properties": {
                        "kwarg_name": {
                            "default": null,
                            "description": "Argument name.",
                            "from_upstream": "never",
                            "title": "Kwarg Name",
                            "type": "string"
                        },
                        "kwarg_value": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "items": {},
                                    "type": "array"
                                },
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "boolean"
                                },
                                {
                                    "type": "object"
                                },
                                {
                                    "format": "date",
                                    "type": "string"
                                },
                                {
                                    "format": "time",
                                    "type": "string"
                                },
                                {
                                    "format": "date-time",
                                    "type": "string"
                                }
                            ],
                            "default": null,
                            "description": "Argument value.",
                            "from_upstream": "always",
                            "title": "Kwarg Value"
                        }
                    },
                    "title": "InputKwargsModel",
                    "type": "object"
                },
                "OutputModifierItemType": {
                    "description": "OutputArgsType Enum",
                    "enum": [
                        "string",
                        "integer",
                        "float",
                        "boolean",
                        "array"
                    ],
                    "title": "OutputModifierItemType",
                    "type": "string"
                },
                "OutputModifierModel": {
                    "properties": {
                        "name": {
                            "description": "Name of the output argument.",
                            "from_upstream": "never",
                            "title": "Name",
                            "type": "string"
                        },
                        "type": {
                            "allOf": [
                                {
                                    "$ref": "#/$defs/OutputModifierItemType"
                                }
                            ],
                            "default": "string",
                            "description": "Type of the output argument.",
                            "from_upstream": "never"
                        },
                        "description": {
                            "default": "",
                            "description": "Description of the output argument.",
                            "from_upstream": "never",
                            "title": "Description",
                            "type": "string"
                        }
                    },
                    "required": [
                        "name"
                    ],
                    "title": "OutputModifierModel",
                    "type": "object"
                }
            },
            "description": "CustomPythonPiece Input Model",
            "properties": {
                "input_args": {
                    "default": [
                        {
                            "kwarg_name": "kwarg_2",
                            "kwarg_value": ""
                        },
                        {
                            "kwarg_name": "kwarg_1",
                            "kwarg_value": ""
                        }
                    ],
                    "description": "Input arguments.",
                    "from_upstream": "never",
                    "items": {
                        "$ref": "#/$defs/InputKwargsModel"
                    },
                    "title": "Input Args",
                    "type": "array"
                },
                "script": {
                    "default": "# Do not modify the function definition line\ndef custom_function(kwarg_1, kwarg_2):\n    # Write your code here\n    print(f\"First argument: {kwarg_1}\")\n    print(f\"Second argument: {kwarg_2}\")\n\n    # Return the output of the function as an object,\n    # Matching the Output Args defined in the Form below\n    return {\n        \"output_1\": \"this is a string\",\n        \"output_2\": 420\n    }\n",
                    "description": "Python script.",
                    "from_upstream": "never",
                    "title": "Script",
                    "type": "string",
                    "widget": "codeeditor-python"
                },
                "output_args": {
                    "default": [
                        {
                            "description": "An example string output",
                            "name": "output_1",
                            "type": "string"
                        },
                        {
                            "description": "An example integer output",
                            "name": "output_2",
                            "type": "integer"
                        }
                    ],
                    "description": "Output arguments.",
                    "from_upstream": "never",
                    "items": {
                        "$ref": "#/$defs/OutputModifierModel"
                    },
                    "title": "Output Args",
                    "type": "array"
                }
            },
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "additionalProperties": true,
            "description": "CustomPythonPiece Output Model",
            "properties": {},
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/CustomPythonPiece"
    },
    "HttpRequestPiece": {
        "name": "HttpRequestPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "default",
            "http",
            "request"
        ],
        "style": {
            "node_label": "HTTP Request",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "material-symbols:send",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Makes a HTTP request to a given URL.",
        "input_schema": {
            "$defs": {
                "MethodTypes": {
                    "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE"
                    ],
                    "title": "MethodTypes",
                    "type": "string"
                }
            },
            "properties": {
                "url": {
                    "description": "URL to make a request to.",
                    "title": "Url",
                    "type": "string"
                },
                "method": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/MethodTypes"
                        }
                    ],
                    "default": "GET",
                    "description": "HTTP method to use."
                },
                "bearer_token": {
                    "default": null,
                    "description": "Bearer token to use for authentication.",
                    "title": "Bearer Token",
                    "type": "string"
                },
                "body_json_data": {
                    "default": "{\n    \"key_1\": \"value_1\",\n    \"key_2\": \"value_2\"\n}\n",
                    "description": "JSON data to send in the request body.",
                    "title": "Body Json Data",
                    "type": "string",
                    "widget": "codeeditor-json"
                }
            },
            "required": [
                "url"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "base64_bytes_data": {
                    "description": "Output data as base64 encoded string.",
                    "title": "Base64 Bytes Data",
                    "type": "string"
                }
            },
            "required": [
                "base64_bytes_data"
            ],
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/HttpRequestPiece"
    },
    "ManualSelectionOfClassesAndGenerateTemplatePiece": {
        "name": "ManualSelectionOfClassesAndGenerateTemplatePiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Manual Selection of Classes & Generate Template",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Manual Selection of Classes & Generate Template Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/ManualSelectionOfClassesAndGenerateTemplatePiece"
    },
    "SelectionOfBestTwoDClassAveragePiece": {
        "name": "SelectionOfBestTwoDClassAveragePiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Selection of Best 2D Class Average",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Selection of Best 2D Class Average",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/SelectionOfBestTwoDClassAveragePiece"
    },
    "PatchCtfPiece": {
        "name": "PatchCtfPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Patch CFT (M)",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Patch CFT (M)",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image from previous task",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "run_extraction_without_ctf_values": {
                    "default": false,
                    "description": "Run extraction without CTF Values?",
                    "title": "Run Extraction Without Ctf Values",
                    "type": "boolean"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/PatchCtfPiece"
    },
    "PatchMotionPiece": {
        "name": "PatchMotionPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Patch Motion",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Patch Motion Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image from previous task",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "make_motion_diagnostics_plots": {
                    "default": false,
                    "description": "Make motion diagnostic plots",
                    "title": "Make Motion Diagnostics Plots",
                    "type": "boolean"
                },
                "number_of_movies_to_plot": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Number of movies do plot",
                    "title": "Number Of Movies To Plot"
                },
                "only_process_this_many_movies": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Only process this many movies",
                    "title": "Only Process This Many Movies"
                },
                "reduce_gpu_memory_usage": {
                    "default": false,
                    "description": "Reduce GPU memory usage",
                    "title": "Reduce Gpu Memory Usage",
                    "type": "boolean"
                },
                "low_memory_mode": {
                    "default": false,
                    "description": "Low-memory mode",
                    "title": "Low Memory Mode",
                    "type": "boolean"
                },
                "maximum_alignment_resolution": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Maximum alignment resolution (A)",
                    "title": "Maximum Alignment Resolution"
                },
                "b_factor_during_alignment": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "B-factor during alignment",
                    "title": "B Factor During Alignment"
                },
                "start_frame": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Start frame (included, 0-based)",
                    "title": "Start Frame"
                },
                "end_frame": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "End frame (excluded, 0-based)",
                    "title": "End Frame"
                },
                "output_f_crop_factor": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Output F-crop factor",
                    "title": "Output F Crop Factor"
                },
                "override_e_a": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Override e/A^2",
                    "title": "Override E A"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/PatchMotionPiece"
    },
    "RefineVolumePiece": {
        "name": "RefineVolumePiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Refine Volume",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Refine Volume",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/RefineVolumePiece"
    },
    "JobStartPiece": {
        "name": "JobStartPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Job Start",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Job Start Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "PriorityType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "1 - Urgent",
                        "2 - High",
                        "3 - Moderated",
                        "4 - Minor",
                        "5 - Standard"
                    ],
                    "title": "PriorityType",
                    "type": "string"
                },
                "SampleTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "Type 1",
                        "Type 2",
                        "Type 3"
                    ],
                    "title": "SampleTypeType",
                    "type": "string"
                },
                "UserType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "Sen A",
                        "Vanclei P",
                        "Tran Le"
                    ],
                    "title": "UserType",
                    "type": "string"
                }
            },
            "properties": {
                "priority": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/PriorityType"
                        }
                    ],
                    "default": "5 - Standard",
                    "description": "Priority"
                },
                "job_number": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Job Number",
                    "title": "Job Number"
                },
                "job_name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Job Name",
                    "title": "Job Name"
                },
                "sample_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/SampleTypeType"
                        }
                    ],
                    "default": "Type 3",
                    "description": "Sample Type"
                },
                "project_investigator": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UserType"
                        }
                    ],
                    "default": "Sen A",
                    "description": "Projct Investigator"
                },
                "project_assignment": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/UserType"
                        }
                    ],
                    "default": "Sen A",
                    "description": "Projct Assignment"
                },
                "project_id": {
                    "description": "Project ID",
                    "title": "Project ID",
                    "type": "string"
                },
                "workspace_id": {
                    "description": "Workspace ID",
                    "title": "Workspace ID",
                    "type": "string"
                }
            },
            "required": [
                "job_number",
                "job_name",
                "project_id",
                "workspace_id"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "description": "Sleep Piece Output Model",
            "properties": {
                "message": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "description": "Job Start Created",
                    "title": "Message"
                }
            },
            "required": [
                "message"
            ],
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/JobStartPiece"
    },
    "TwoDClassAveragingPiece": {
        "name": "TwoDClassAveragingPiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "2D Class Averaging",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "2D Class Averaging Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/TwoDClassAveragingPiece"
    },
    "TwoDClassAveragingOfBoxedOutParticlePiece": {
        "name": "TwoDClassAveragingOfBoxedOutParticlePiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "2D Class Averaging of Boxed Out Particle",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "2D Class Averaging of Boxed Out Particle Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "inputs": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Inputs",
                    "title": "Inputs"
                },
                "window_dataset_real_space": {
                    "default": false,
                    "description": "Window dataset (real-space)",
                    "title": "Window Dataset Real Space",
                    "type": "boolean"
                },
                "window_inner_radius": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Window inner radius",
                    "title": "Window Inner Radius"
                },
                "window_outer_radius": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Window outer radius",
                    "title": "Window Outer Radius"
                },
                "number_of_2d_classes": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Number of 2D classes",
                    "title": "Number Of 2D Classes"
                },
                "maximum_resolution": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Maximum resolution (\u00c5)",
                    "title": "Maximum Resolution"
                },
                "maximum_alignment_res": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Maximum alignment res (\u00c5)",
                    "title": "Maximum Alignment Res"
                },
                "initial_classification_uncertainty_factor": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Initial classification uncertainty factor",
                    "title": "Initial Classification Uncertainty Factor"
                },
                "use_circular_mask_on_2D_classes": {
                    "default": false,
                    "description": "Use circular mask on 2D classes",
                    "title": "Use Circular Mask On 2D Classes",
                    "type": "boolean"
                },
                "circular_mask_diameter": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Circular mask diameter (\u00c5)",
                    "title": "Circular Mask Diameter"
                },
                "circular_mask_diameter_outer": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Circular mask diameter outer (\u00c5)",
                    "title": "Circular Mask Diameter Outer"
                },
                "re_center_2D_classes": {
                    "default": false,
                    "description": "Re-center 2D classes",
                    "title": "Re Center 2D Classes",
                    "type": "boolean"
                },
                "re_center_mask_threshold": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Re-center mask threshold",
                    "title": "Re Center Mask Threshold"
                },
                "re_center_mask_binary": {
                    "default": false,
                    "description": "Re-center mask binary",
                    "title": "Re Center Mask Binary",
                    "type": "boolean"
                },
                "align_filament_classes_vertically": {
                    "default": false,
                    "description": "Align filament classes vertically (BETA)",
                    "title": "Align Filament Classes Vertically",
                    "type": "boolean"
                },
                "output_filament_in_plane_rotations": {
                    "default": false,
                    "description": "Output filament in-plane rotations",
                    "title": "Output Filament In Plane Rotations",
                    "type": "boolean"
                },
                "force_max_over_poses_shifts": {
                    "default": false,
                    "description": "Force Max over poses/shifts",
                    "title": "Force Max Over Poses Shifts",
                    "type": "boolean"
                },
                "cft_flip_phases_only": {
                    "default": false,
                    "description": "CTF flip phases only",
                    "title": "Cft Flip Phases Only",
                    "type": "boolean"
                },
                "randomly_perturb_poses_radians": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Randomly perturb poses radians",
                    "title": "Randomly Perturb Poses Radians"
                },
                "number_of_final_full_iterations": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Number of final full iterations",
                    "title": "Number Of Final Full Iterations"
                },
                "number_of_online_EM_iterations": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Number of online-EM iterations",
                    "title": "Number Of Online Em Iterations"
                },
                "batchsize_per_class": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Batchsize per class",
                    "title": "Batchsize Per Class"
                },
                "two_D_initial_scale": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "2D initial scales",
                    "title": "Two D Initial Scale"
                },
                "two_D_zeropad_factor": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "2D zeropad factor",
                    "title": "Two D Zeropad Factor"
                },
                "ignore_DC_from_image_data": {
                    "default": false,
                    "description": "Ignore DC from image data",
                    "title": "Ignore Dc From Image Data",
                    "type": "boolean"
                },
                "min_over_scale_after_first_iteration": {
                    "default": false,
                    "description": "Min over scale after first iteration",
                    "title": "Min Over Scale After First Iteration",
                    "type": "boolean"
                },
                "enforce_non_negativity": {
                    "default": false,
                    "description": "Enforce non-negativity",
                    "title": "Enforce Non Negativity",
                    "type": "boolean"
                },
                "use_clamp_solvent_to_solve_2D_classes": {
                    "default": false,
                    "description": "Use clamp-solvent to solve 2D classes",
                    "title": "Use Clamp Solvent To Solve 2D Classes",
                    "type": "boolean"
                },
                "use_FRC_based_regularizer": {
                    "default": false,
                    "description": "Use FRC based regularizer",
                    "title": "Use Frc Based Regularizer",
                    "type": "boolean"
                },
                "use_full_FRC": {
                    "default": false,
                    "description": "Use full FRC",
                    "title": "Use Full Frc",
                    "type": "boolean"
                },
                "iteration_to_start_annealing_sigma": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Iteration to start annealing sigma",
                    "title": "Iteration To Start Annealing Sigma"
                },
                "number_of_iteration_to_anneal_sigma": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Number of iteration to anneal sigma",
                    "title": "Number Of Iteration To Anneal Sigma"
                },
                "use_white_noise_model": {
                    "default": false,
                    "description": "Use white noise model",
                    "title": "Use White Noise Model",
                    "type": "boolean"
                },
                "show_plots_from_intermediate_steps": {
                    "default": false,
                    "description": "Show plots from intermediate steps",
                    "title": "Show Plots From Intermediate Steps",
                    "type": "boolean"
                },
                "random_seed": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Random seed",
                    "title": "Random Seed"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/TwoDClassAveragingOfBoxedOutParticlePiece"
    },
    "AutomatedParticleBoxingUsingTemplatePiece": {
        "name": "AutomatedParticleBoxingUsingTemplatePiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Automated Particle Boxing Using Template",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Automated Particle Boxing Using Template",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/AutomatedParticleBoxingUsingTemplatePiece"
    },
    "FinalVolumePiece": {
        "name": "FinalVolumePiece",
        "dependency": {
            "dockerfile": null,
            "requirements_file": "requirements_0.txt"
        },
        "tags": [
            "TAMU"
        ],
        "style": {
            "node_label": "Final Volume",
            "node_type": "default",
            "node_style": {
                "backgroundColor": "#ebebeb"
            },
            "useIcon": true,
            "icon_class_name": "fa-solid:database",
            "iconStyle": {
                "cursor": "pointer"
            }
        },
        "description": "Final Volume Description",
        "container_resources": {
            "requests": {
                "cpu": 100,
                "memory": 128
            },
            "limits": {
                "cpu": 500,
                "memory": 512
            }
        },
        "input_schema": {
            "$defs": {
                "NoiseModelType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "white",
                        "symmetric",
                        "coloured"
                    ],
                    "title": "NoiseModelType",
                    "type": "string"
                },
                "OutputTypeType": {
                    "description": "Output type for the result text",
                    "enum": [
                        "file",
                        "base64_string",
                        "both"
                    ],
                    "title": "OutputTypeType",
                    "type": "string"
                }
            },
            "description": "Sleep Piece Input Model",
            "properties": {
                "input_image": {
                    "description": "Input image. It should be either a path to a file, or a base64 encoded string.",
                    "from_upstream": "always",
                    "title": "Input Image",
                    "type": "string"
                },
                "particles": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Particles",
                    "title": "Particles"
                },
                "volume": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Volume",
                    "title": "Volume"
                },
                "mask": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Mask",
                    "title": "Mask"
                },
                "window_dataset_real_space": {
                    "default": false,
                    "description": "Window dataset (real-space)",
                    "title": "Window Dataset Real Space",
                    "type": "boolean"
                },
                "window_inner_radius": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Window inner radius",
                    "title": "Window Inner Radius"
                },
                "window_outer_radius": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Window outer radius",
                    "title": "Window Outer Radius"
                },
                "symmetry": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Symmetry",
                    "title": "Symmetry"
                },
                "do_symmetry_alignment": {
                    "default": false,
                    "description": "Do symmetry alignment",
                    "title": "Do Symmetry Alignment",
                    "type": "boolean"
                },
                "re_estimate_greyscale_level_of_input_reference": {
                    "default": false,
                    "description": "Re-estimate greyscale level of input reference",
                    "title": "Re Estimate Greyscale Level Of Input Reference",
                    "type": "boolean"
                },
                "number_of_extra_final_passes": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Number of extra final passes",
                    "title": "Number Of Extra Final Passes"
                },
                "maximum_align_resolution": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Maximum align resolution (\u00c5)",
                    "title": "Maximum Align Resolution"
                },
                "initial_lowpass_resolution": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Initial lowpass resolution (\u00c5)",
                    "title": "Initial Lowpass Resolution"
                },
                "GSFSC_split_resolution": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "GSFSC split resolution (\u00c5)",
                    "title": "Gsfsc Split Resolution"
                },
                "force_re_do_GS_split": {
                    "default": false,
                    "description": "Force re-do GS split",
                    "title": "Force Re Do Gs Split",
                    "type": "boolean"
                },
                "enforce_non_negativity": {
                    "default": false,
                    "description": "Enforce non-negativity",
                    "title": "Enforce Non Negativity",
                    "type": "boolean"
                },
                "window_structure_in_real_space": {
                    "default": false,
                    "description": "Window structure in real space",
                    "title": "Window Structure In Real Space",
                    "type": "boolean"
                },
                "skip_interpolant_premult": {
                    "default": false,
                    "description": "Skip interpolant premult",
                    "title": "Skip Interpolant Premult",
                    "type": "boolean"
                },
                "ignore_DC_component": {
                    "default": false,
                    "description": "Ignore DC component",
                    "title": "Ignore Dc Component",
                    "type": "boolean"
                },
                "ignore_tilt": {
                    "default": false,
                    "description": "Ignore tilt",
                    "title": "Ignore Tilt",
                    "type": "boolean"
                },
                "ignore_trefoil": {
                    "default": false,
                    "description": "Ignore trefoil",
                    "title": "Ignore Trefoil",
                    "type": "boolean"
                },
                "ignore_tetra": {
                    "default": false,
                    "description": "Ignore tetra",
                    "title": "Ignore Tetra",
                    "type": "boolean"
                },
                "use_random_ordering_of_particles": {
                    "default": false,
                    "description": "Use random ordering of particles",
                    "title": "Use Random Ordering Of Particles",
                    "type": "boolean"
                },
                "initial_batchsize": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Initial batchsize",
                    "title": "Initial Batchsize"
                },
                "batchsize_epsilon": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Batchsize epsilon",
                    "title": "Batchsize Epsilon"
                },
                "batchsize_snrfactor": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Batchsize snrfactor",
                    "title": "Batchsize Snrfactor"
                },
                "scale_min_use_start_iter": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Scale min/use start iter",
                    "title": "Scale Min Use Start Iter"
                },
                "noise_model": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/NoiseModelType"
                        }
                    ],
                    "default": "symmetric",
                    "description": "Noise model"
                },
                "noise_priorw": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Noise priorw",
                    "title": "Noise Priorw"
                },
                "noise_initw": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Noise initw",
                    "title": "Noise Initw"
                },
                "noise_initial_sigma_scale": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Noise initial sigma-scale",
                    "title": "Noise Initial Sigma Scale"
                },
                "initialize_noise_model_from_images": {
                    "default": false,
                    "description": "Initialize noise model from images",
                    "title": "Initialize Noise Model From Images",
                    "type": "boolean"
                },
                "dynamic_mask_threshold": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Dynamic mask threshold (0-1)",
                    "title": "Dynamic Mask Threshold"
                },
                "dynamic_mask_near": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Dynamic mask near (\u00c5)",
                    "title": "Dynamic Mask Near"
                },
                "dynamic_mask_far": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Dynamic mask far (\u00c5)",
                    "title": "Dynamic Mask Far"
                },
                "dynamic_mask_start_resolution": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Dynamic mask start resolution (A)",
                    "title": "Dynamic Mask Start Resolution"
                },
                "dynamic_mask_use_absolute_value": {
                    "default": false,
                    "description": "Dynamic mask use absolute value",
                    "title": "Dynamic Mask Use Absolute Value",
                    "type": "boolean"
                },
                "show_plots_from_intermediate_steps": {
                    "default": false,
                    "description": "Show plots from intermediate steps",
                    "title": "Show Plots From Intermediate Steps",
                    "type": "boolean"
                },
                "GPU_batch_size_of_images": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "GPU batch size of images",
                    "title": "Gpu Batch Size Of Images"
                },
                "optimize_per_particle_defocus": {
                    "default": false,
                    "description": "Optimize per-particle defocus",
                    "title": "Optimize Per Particle Defocus",
                    "type": "boolean"
                },
                "num_particles_to_plot": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Num. particles to plot",
                    "title": "Num Particles To Plot"
                },
                "minimum_fit_res": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Minimum Fit Res (\u00c5)",
                    "title": "Minimum Fit Res"
                },
                "defocus_search_range": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Defocus Search Range (\u00c5 +/-)",
                    "title": "Defocus Search Range"
                },
                "defocus_GPU_batch_size_of_images": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "GPU batch size of images",
                    "title": "Defocus Gpu Batch Size Of Images"
                },
                "optimize_per_group_CTF_params": {
                    "default": false,
                    "description": "Optimize per-group CTF params",
                    "title": "Optimize Per Group Ctf Params",
                    "type": "boolean"
                },
                "num_groups_to_plot": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Num. groups to plot",
                    "title": "Num Groups To Plot"
                },
                "binning_to_apply_to_plots": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Binning to apply to plots",
                    "title": "Binning To Apply To Plots"
                },
                "global_minimum_fit_res": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Global Minimum Fit Res (\u00c5)",
                    "title": "Global Minimum Fit Res"
                },
                "fit_tilt": {
                    "default": false,
                    "description": "Fit Tilt",
                    "title": "Fit Tilt",
                    "type": "boolean"
                },
                "fit_trefoil": {
                    "default": false,
                    "description": "Fit Trefoil",
                    "title": "Fit Trefoil",
                    "type": "boolean"
                },
                "fit_spherical_aberration": {
                    "default": false,
                    "description": "Fit Spherical Aberration",
                    "title": "Fit Spherical Aberration",
                    "type": "boolean"
                },
                "fit_tetrafoil": {
                    "default": false,
                    "description": "Fit Tetrafoil",
                    "title": "Fit Tetrafoil",
                    "type": "boolean"
                },
                "fit_anisotropic_mag": {
                    "default": false,
                    "description": "Fit Anisotropic Mag",
                    "title": "Fit Anisotropic Mag",
                    "type": "boolean"
                },
                "global_GPU_batch_size_of_images": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Global GPU batch size of images",
                    "title": "Global Gpu Batch Size Of Images"
                },
                "do_EWS_correction": {
                    "default": false,
                    "description": "Do EWS correction",
                    "title": "Do Ews Correction",
                    "type": "boolean"
                },
                "EWS_curvature_sign": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "EWS curvature sign",
                    "title": "Ews Curvature Sign"
                },
                "random_seed": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": false,
                    "description": "Random seed",
                    "title": "Random Seed"
                },
                "output_type": {
                    "allOf": [
                        {
                            "$ref": "#/$defs/OutputTypeType"
                        }
                    ],
                    "default": "both",
                    "description": "Format of the output image. Options are: `file`, `base64_string`, `both`."
                }
            },
            "required": [
                "input_image"
            ],
            "title": "InputModel",
            "type": "object"
        },
        "output_schema": {
            "properties": {
                "image_base64_string": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Base64 encoded string of the output image.",
                    "title": "Image Base64 String"
                },
                "image_file_path": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": "",
                    "description": "Path to the output image file.",
                    "title": "Image File Path"
                }
            },
            "title": "OutputModel",
            "type": "object"
        },
        "secrets_schema": null,
        "source_url": "https://github.com/vanclei/domino_pieces.git/tree/main/pieces/FinalVolumePiece"
    }
}